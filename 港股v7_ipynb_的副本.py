# -*- coding: utf-8 -*-
"""港股V7.ipynb 的副本

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12SCLrx5GRJs8qylrOKLGeUVe9IgCzJDA
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import pytz  # 导入 pytz 库


# 设置香港时区
hong_kong_tz = pytz.timezone('Asia/Hong_Kong')


# 计算最近一年的日期范围
# end_date = datetime.now()
# start_date = end_date - timedelta(days=365)

# 计算最近一年的日期范围
end_date = datetime.now(hong_kong_tz)
start_date = end_date - timedelta(days=365)

#print(end_date)
#print(start_date)

# 下载数据
# 股票代碼列表, 恒指成份股
stock_codes = [
    "0001", "0002", "0003", "0005", "0006", "0011", "0012", "0016",
    "0027", "0066", "0101", "0175", "0241", "0267", "0285", "0288",
    "0291", "0300", "0316", "0322", "0386", "0388", "0669", "0688",
    "0700", "0762", "0823", "0836", "0857", "0868", "0881", "0883",
    "0939", "0941", "0960", "0968", "0981", "0992", "1024", "1038",
    "1044", "1088", "1093", "1099", "1109", "1113", "1177", "1209",
    "1211", "1299", "1378", "1398", "1810", "1876", "1928", "1929",
    "1997", "2015", "2020", "2057", "2269", "2313", "2318", "2319",
    "2331", "2359", "2382", "2388", "2628", "2688", "2899", "3690",
    "3692", "3968", "3988", "6618", "6690", "6862", "9618", "9633",
    "9888", "9901", "9961", "9988", "9999"
]

# 轉換為 yfinance 可讀取格式
stocks = [code + ".HK" for code in stock_codes]
#stocks = ['RDDT', 'GOOGL', 'MSFT', 'AMZN']
data = yf.download(stocks, start=start_date.strftime('%Y-%m-%d'), end=end_date.strftime('%Y-%m-%d'))

# 计算黄金分割水平
def calculate_fibonacci_levels(max_price, min_price):
    diff = max_price - min_price
    levels = {
        '0%': min_price,
        '23.6%': min_price + diff * 0.236,
        '38.2%': min_price + diff * 0.382,
        '50%': min_price + diff * 0.5,
        '61.8%': min_price + diff * 0.618,
        '76.4%': min_price + diff * 0.764,
        '100%': max_price
    }
    return levels

# 计算 MACD 的 DIF 和 DEA
def calculate_macd(data, short_window=12, long_window=26, signal_window=9):
    exp_short = data['Close'].ewm(span=short_window, adjust=False).mean()
    exp_long = data['Close'].ewm(span=long_window, adjust=False).mean()
    dif = exp_short - exp_long
    dea = dif.ewm(span=signal_window, adjust=False).mean()
    macd = (dif - dea) * 2
    return dif, dea, macd

# 计算 RSI
# 计算 RSI
def calculate_rsi(data, period=14):
    close_change = data['Close'].diff()

    gai = close_change.where(close_change > 0, 0)
    los = -close_change.where(close_change < 0, 0)

    gain = gai.rolling(window=period).mean().fillna(0).round(2)
    loss = los.rolling(window=period).mean().fillna(0).round(2)

    gain_average = pd.Series(index=data.index, dtype='float64')
    loss_average = pd.Series(index=data.index, dtype='float64')

    gain_average.iloc[period-1] = gai.iloc[:period].mean()
    loss_average.iloc[period-1] = los.iloc[:period].mean()

    for i in range(period, len(data)):
        gain_average.iloc[i] = (gain_average.iloc[i-1] * (period - 1) + gai.iloc[i]) / period
        loss_average.iloc[i] = (loss_average.iloc[i-1] * (period - 1) + los.iloc[i]) / period

    rs = gain_average / loss_average.replace(0, 1)  # 避免除以 0
    rsi = 100 - (100 / (1 + rs))

    return rsi





# 计算 DMI 和 ADX
def calculate_dmi(data, window=14):
    high = data['High']
    low = data['Low']
    close = data['Close']

    high_diff = high.diff()
    low_diff = low.diff()

    pdi = 100 * (high_diff.where(high_diff > low_diff, 0).rolling(window=window).sum() / close.rolling(window=window).mean())
    mdi = 100 * (-low_diff.where(low_diff > high_diff, 0).rolling(window=window).sum() / close.rolling(window=window).mean())

    dx = abs(pdi - mdi) / (abs(pdi) + abs(mdi)) * 100
    adx = dx.rolling(window=window).mean()

    return pdi, mdi, adx

# 计算 DeMarker 指标
def calculate_demarker(data, window=14):
    high = data['High']
    low = data['Low']
    close = data['Close']

    high_diff = high.diff().where(high.diff() > 0, 0)
    low_diff = low.diff().where(low.diff() > 0, 0)

    dem_max = high_diff.rolling(window=window).sum()
    dem_min = (close - low).rolling(window=window).sum()

    demarker = dem_max / (dem_max + dem_min) * 100
    return demarker

# 计算 TOM_DeMarker 指标
def calculate_tom_demarker(data, window=14):
    high = data['High']
    low = data['Low']

    de_max = (high - high.shift(1)).clip(lower=0)
    de_min = (low.shift(1) - low).clip(lower=0)

    avg_de_max = de_max.rolling(window=window).mean().round(2)
    avg_de_min = de_min.rolling(window=window).mean().round(2)

    tom_demarker = avg_de_max / (avg_de_max + avg_de_min) * 100
    return tom_demarker

# 计算 TOM_DeMarker9 指标
def calculate_tom_demarker9(data, window=9):
    high = data['High']
    low = data['Low']

    de_max9 = (high - high.shift(1)).clip(lower=0)
    de_min9 = (low.shift(1) - low).clip(lower=0)

    avg_de_max9 = de_max9.rolling(window=window).mean().round(2)
    avg_de_min9 = de_min9.rolling(window=window).mean().round(2)

    tom_demarker9 = avg_de_max9 / (avg_de_max9 + avg_de_min9) * 100
    return tom_demarker9

# 汇总结果
results_summary = {
    'MACD > 0 百分比': {},
    'DIF > 0 百分比': {},
    'DIF > DEA 百分比': {},
    '最后 TOM_DeMarker9 < 0.3 股票': [],
    '最后 TOM_DeMarker < 0.3 股票': [],
    'DIF > DEA 股票': [],  # 添加此项以存储符合条件的股票
    'RSI < 30 股票': [],  # 添加此项以存储 RSI < 30 股票
    'RSI7 < 30 股票': [],  # 添加此项以存储 RSI7 < 30 股票 ,,, 改 <50,,, 'RSI7 < 50 股票': [],
    'MACD > 0 股票': [],  # 添加此项以存储 MACD > 0 的股票
    'RSI > 30 百分比': {}
}
# 在汇总部分增加 RSI7 的计算
with pd.ExcelWriter('stock_analysis_with_all_indicators.xlsx', engine='openpyxl') as writer:
    for stock in stocks:
        stock_data = data.xs(stock, level=1, axis=1)

        max_price = stock_data['Close'].max()
        min_price = stock_data['Close'].min()

        # 计算指标
        levels = calculate_fibonacci_levels(max_price, min_price)
        dif, dea, macd = calculate_macd(stock_data)
        rsi = calculate_rsi(stock_data)  # 计算 RSI14
        rsi7 = calculate_rsi(stock_data, period=7)  # 计算 RSI7
        pdi, mdi, adx = calculate_dmi(stock_data)
        demarker = calculate_demarker(stock_data)
        tom_demarker = calculate_tom_demarker(stock_data)
        tom_demarker9 = calculate_tom_demarker9(stock_data)


        results = []
        for date in stock_data.index:
            results.append({
                'Date': date,
                'Close': stock_data['Close'][date],
                **levels,
                'DIF': dif[date],
                'DEA': dea[date],
                'MACD': macd[date],
                'RSI': rsi[date],
                'RSI7': rsi7[date],  # 添加 RSI7
                'PDI': pdi[date],
                'MDI': mdi[date],
                'ADX': adx[date],
                'DeMarker': demarker[date],
                'TOM_DeMarker': tom_demarker[date],
                'TOM_DeMarker9': tom_demarker9[date]
            })

        # 创建 DataFrame
        final_data = pd.DataFrame(results)

         # 将数据写入 Excel 的不同工作表
        final_data.to_excel(writer, sheet_name=stock, index=False)

        # 计算 MACD > 0 的百分比
        macd_positive_percentage = (final_data['MACD'] > 0).mean() * 100
        results_summary['MACD > 0 百分比'][stock] = round(macd_positive_percentage, 2)


        # 收集 MACD > 0 的股票
        if final_data['MACD'].iloc[-1] > 0:
            results_summary['MACD > 0 股票'].append(stock)




        # 计算 DIF > 0 的百分比
        dif_positive_percentage = (final_data['DIF'] > 0).mean() * 100
        results_summary['DIF > 0 百分比'][stock] = round(dif_positive_percentage, 2)

        # 计算 DIF > DEA 的百分比
        dif_greater_than_dea_percentage = (final_data['DIF'] > final_data['DEA']).mean() * 100
        results_summary['DIF > DEA 百分比'][stock] = round(dif_greater_than_dea_percentage, 2)





      #  # 检查最后一个 TOM_DeMarker9 是否小于 30
      #  if tom_demarker9.iloc[-1] < 30:
      #      results_summary['最后 TOM_DeMarker9 < 0.3 股票'].append(stock)


        # 检查最后一个 TOM_DeMarker9 是否小于 30
        if tom_demarker9.iloc[-1] < 30:
            results_summary['最后 TOM_DeMarker9 < 0.3 股票'].append(stock)

            # 同时检查最后 RSI 是否小于 30 改為35
            if final_data['RSI'].iloc[-1] < 35:
                print(f"最后 TOM_DeMarker9 < 0.3 且 RSI < 35 的股票: {stock}")

        # 检查最后一个 TOM_DeMarker 是否小于 30
        if tom_demarker.iloc[-1] < 30:
            results_summary['最后 TOM_DeMarker < 0.3 股票'].append(stock)

        # 检查并收集 DIF > DEA 的股票
        if final_data['DIF'].iloc[-1] > final_data['DEA'].iloc[-1]:
            results_summary['DIF > DEA 股票'].append(stock)

        # 检查并收集 RSI < 30 的股票
        if final_data['RSI'].iloc[-1] < 30:
            results_summary['RSI < 30 股票'].append(stock)

        # 检查并收集 RSI7 < 30 的股票
        if final_data['RSI7'].iloc[-1] < 30: #要改小於50,    if final_data['RSI7'].iloc[-1] < 50:
            results_summary['RSI7 < 30 股票'].append(stock) # results_summary['RSI7 < 50 股票'].append(stock)




        # 计算 RSI > 30 的百分比
        rsi_above_30_count = (final_data['RSI'] > 30).sum()
        total_rsi_count = final_data['RSI'].count()
        rsi_above_30_percentage = (rsi_above_30_count / total_rsi_count) * 100 if total_rsi_count > 0 else 0
        results_summary['RSI > 30 百分比'][stock] = round(rsi_above_30_percentage, 2)

# 输出总结
print("汇总结果:")
print("MACD > 0 百分比:", {stock: f"{percentage:.2f}%" for stock, percentage in results_summary['MACD > 0 百分比'].items()})
print("DIF > 0 百分比:", {stock: f"{percentage:.2f}%" for stock, percentage in results_summary['DIF > 0 百分比'].items()})
print("DIF > DEA 百分比:", {stock: f"{percentage:.2f}%" for stock, percentage in results_summary['DIF > DEA 百分比'].items()})
print("RSI > 30 百分比:", {stock: f"{percentage:.2f}%" for stock, percentage in results_summary['RSI > 30 百分比'].items()})
print("**************************")
print("最后 TOM_DeMarker9 < 0.3 的股票:", results_summary['最后 TOM_DeMarker9 < 0.3 股票'])
print("最后 TOM_DeMarker14 < 0.3 的股票:", results_summary['最后 TOM_DeMarker < 0.3 股票'])
print("DIF > DEA 的股票:", results_summary['DIF > DEA 股票'])
print("RSI < 30 的股票:", results_summary['RSI < 30 股票'])
print("RSI7 < 30 的股票:", results_summary['RSI7 < 30 股票']) #要改小於50, print("RSI7 < 50 的股票:", results_summary['RSI7 < 50 股票'])
print("MACD > 0 的股票:", results_summary['MACD > 0 股票'])

# 打印符合条件的 MACD > 0 股票及其百分比
print("MACD > 0 的股票及其全年>0百分比和全年RSI>30百分比:")
for stock in results_summary['MACD > 0 股票']:
    macd_percentage = results_summary['MACD > 0 百分比'].get(stock, 0)
    RSI_30_precentage = results_summary['RSI > 30 百分比'].get(stock, 0)
    print(f"{stock}: {macd_percentage:.2f}% : {RSI_30_precentage:.2f}%")

## TG message
def send_telegram_message(chat_id, message):
    bot_token = '7719323893:AAGGlMkBDX7ukogAYzZxgEmUEhM-NBKRh_Y'  # 替換為你的 Bot Token
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    data = {
        'chat_id': chat_id,
        'text': message
    }
    response = requests.post(url, data=data)
    return response.json()

# 使用示例
if __name__ == '__main__':
    chat_id = '5091075589'  # 替換為你的聊天 ID
    # 構建消息內容
    # 獲取最後 TOM_DeMarker9 < 0.3 的股票
    tom_demarker9_stocks = results_summary['最后 TOM_DeMarker9 < 0.3 股票']

    message = "最后 TOM_DeMarker9 < 0.3 的股票: " + str(tom_demarker9_stocks) + "\n"


    # 發送消息
    result = send_telegram_message(chat_id, message)
    print(result)